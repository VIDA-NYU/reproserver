---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config
data:
  s3.url: http://minio:9000
  s3.bucket-prefix: prod-
  s3.client-url: http://files.localhost:8000
  proxy.url: http://{short_id}-{port}.web.localhost:8000/
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: k8s-config
data:
  runner.namespace: default
  runner.pod_spec: |
    restartPolicy: Never
    containers:
      - name: docker
        image: docker:20.10.7-dind
        securityContext:
          privileged: true
        args:
          - "dockerd"
          - "--host=tcp://127.0.0.1:2375"
          - "--storage-driver=overlay2"
          - "--userns-remap=default"
          - "--insecure-registry=registry:5000"
      - name: runner
        image: reproserver_web
        imagePullPolicy: IfNotPresent
        args: ["python3", "-c", "import sys; from reproserver.run.k8s import _run_in_pod; _run_in_pod(sys.argv[1])"]
        env:
          - name: S3_KEY
            valueFrom:
              secretKeyRef:
                name: reproserver-secret
                key: s3_key
          - name: S3_SECRET
            valueFrom:
              secretKeyRef:
                name: reproserver-secret
                key: s3_secret
          - name: S3_URL
            valueFrom:
              configMapKeyRef:
                name: config
                key: s3.url
          - name: S3_BUCKET_PREFIX
            valueFrom:
              configMapKeyRef:
                name: config
                key: s3.bucket-prefix
          - name: S3_CLIENT_URL
            valueFrom:
              configMapKeyRef:
                name: config
                key: s3.client-url
          - name: API_ENDPOINT
            value: http://web:8000
          - name: CONNECTION_TOKEN
            valueFrom:
              secretKeyRef:
                name: reproserver-secret
                key: connection_token
          - name: DOCKER_HOST
            value: tcp://127.0.0.1:2375
          - name: REGISTRY
            value: registry:5000
          - name: REPROZIP_USAGE_STATS
            value: "off"
        ports:
          - name: proxy
            containerPort: 5597
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      serviceAccountName: reproserver-sa
      containers:
        - name: web
          image: reproserver_web
          imagePullPolicy: IfNotPresent
          env:
            - name: WEB_PROXY_URL
              valueFrom:
                configMapKeyRef:
                  name: config
                  key: proxy.url
            # Uncomment to enable web proxying at /results/<run>/port/<number>/
            #- name: WEB_PROXY_CLASS
            #  value: reproserver.proxy:K8sSubdirProxyHandler
            - name: S3_KEY
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: s3_key
            - name: S3_SECRET
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: s3_secret
            - name: S3_URL
              valueFrom:
                configMapKeyRef:
                  name: config
                  key: s3.url
            - name: S3_BUCKET_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: config
                  key: s3.bucket-prefix
            - name: S3_CLIENT_URL
              valueFrom:
                configMapKeyRef:
                  name: config
                  key: s3.client-url
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: postgres_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: postgres_password
            - name: POSTGRES_HOST
              value: postgres
            - name: POSTGRES_DB
              value: reproserver
            - name: CONNECTION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: connection_token
            - name: REPROZIP_USAGE_STATS
              value: "off"
            - name: RUNNER_TYPE
              value: k8s
            - name: K8S_CONFIG_DIR
              value: /etc/k8s-config
            - name: ZENODO_TOKEN
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: zenodo_token
            - name: OVERRIDE_RUNNER_IMAGE
              value: reproserver_web
          volumeMounts:
            - name: k8s-config
              mountPath: /etc/k8s-config
          ports:
            - name: web
              containerPort: 8000
            - name: prometheus
              containerPort: 8090
          readinessProbe:
            httpGet:
              path: /health
              port: 8000
              httpHeaders:
                - name: X-Kubernetes-Probe
                  value: readiness
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: 8000
              httpHeaders:
                - name: X-Kubernetes-Probe
                  value: liveness
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 6
      volumes:
        - name: k8s-config
          configMap:
            name: k8s-config
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: proxy
  template:
    metadata:
      labels:
        app: proxy
    spec:
      containers:
        - name: proxy
          image: reproserver_web
          imagePullPolicy: IfNotPresent
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: postgres_user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: postgres_password
            - name: POSTGRES_HOST
              value: postgres
            - name: POSTGRES_DB
              value: reproserver
            - name: CONNECTION_TOKEN
              valueFrom:
                secretKeyRef:
                  name: reproserver-secret
                  key: connection_token
          command:
            - "reproserver-k8s-proxy"
          ports:
            - name: proxy
              containerPort: 8001
            - name: prometheus
              containerPort: 8090
          readinessProbe:
            httpGet:
              path: /health
              port: 8001
              httpHeaders:
                - name: X-Kubernetes-Probe
                  value: readiness
            initialDelaySeconds: 10
            periodSeconds: 10
            failureThreshold: 1
          livenessProbe:
            httpGet:
              path: /health
              port: 8001
              httpHeaders:
                - name: X-Kubernetes-Probe
                  value: liveness
            initialDelaySeconds: 30
            periodSeconds: 10
            failureThreshold: 6
---
apiVersion: v1
kind: Service
metadata:
  name: web
  labels:
    app: web
spec:
  selector:
    app: web
  ports:
    - name: web
      protocol: TCP
      port: 8000
---
apiVersion: v1
kind: Service
metadata:
  name: proxy
  labels:
    app: proxy
spec:
  selector:
    app: proxy
  ports:
    - name: proxy
      protocol: TCP
      port: 8001
